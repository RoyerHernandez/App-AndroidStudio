package com.servientrega.yamba.ui;

import android.app.ListFragment;
import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.database.Cursor;
import android.os.Bundle;
import android.text.format.DateUtils;
import android.util.Log;
import android.view.View;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.SimpleCursorAdapter.ViewBinder;
import android.widget.TextView;

import com.servientrega.yamba.R;
import com.servientrega.yamba.model.StatusContact;


/**
 * Created by marlonramos on 2/2/15.
 */
public class TimelineFragment extends ListFragment implements LoaderManager.LoaderCallbacks<Cursor> {
    private static final String TAG = TimelineFragment.class.getSimpleName();

    private static final String[] FROM = { StatusContact.Column.USER,
            StatusContact.Column.MESSAGE, StatusContact.Column.CREATED_AT };

    private static final int[] TO = { R.id.list_item_text_user,
            R.id.list_item_text_message, R.id.list_item_text_created_at};

    private static final int LOADER_ID = 42;

    private SimpleCursorAdapter adapter;

    public TimelineFragment(){

    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        Log.d(TAG,"onActivityCreated");

        adapter = new SimpleCursorAdapter(getActivity(), R.layout.list_item,null,FROM,TO,0);

        adapter.setViewBinder(new TimelineViewBinder());

        setListAdapter(adapter);

        getLoaderManager().initLoader(LOADER_ID,null,this);
    }


    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        if(id != LOADER_ID)
            return null;
        Log.d(TAG,"onCreateLoader");

        return new CursorLoader(getActivity(),StatusContact.CONTENT_URI,
                null,null,null,StatusContact.DEFAULT_SORT);
    }

    /**
     * Called when a previously created loader has finished its load.  Note
     * that normally an application is <em>not</em> allowed to commit fragment
     * transactions while in this call, since it can happen after an
     * activity's state is saved.  See {@link android.app.FragmentManager#beginTransaction()
     * FragmentManager.openTransaction()} for further discussion on this.
     * <p/>
     * <p>This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader.  At this point
     * you should remove all use of the old data (since it will be released
     * soon), but should not do your own release of the data since its Loader
     * owns it and will take care of that.  The Loader will take care of
     * management of its data so you don't have to.  In particular:
     * <p/>
     * <ul>
     * <li> <p>The Loader will monitor for changes to the data, and report
     * them to you through new calls here.  You should not monitor the
     * data yourself.  For example, if the data is a {@link Cursor}
     * and you place it in a {@link android.widget.CursorAdapter}, use
     * the {@link android.widget.CursorAdapter#CursorAdapter(android.content.Context,
     * Cursor, int)} constructor <em>without</em> passing
     * in either {@link android.widget.CursorAdapter#FLAG_AUTO_REQUERY}
     * or {@link android.widget.CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER}
     * (that is, use 0 for the flags argument).  This prevents the CursorAdapter
     * from doing its own observing of the Cursor, which is not needed since
     * when a change happens you will get a new Cursor throw another call
     * here.
     * <li> The Loader will release the data once it knows the application
     * is no longer using it.  For example, if the data is
     * a {@link Cursor} from a {@link CursorLoader},
     * you should not call close() on it yourself.  If the Cursor is being placed in a
     * {@link android.widget.CursorAdapter}, you should use the
     * {@link android.widget.CursorAdapter#swapCursor(Cursor)}
     * method so that the old Cursor is not closed.
     * </ul>
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        Log.d(TAG,"onLoadFinished with cursor: " + data.getCount());
        adapter.swapCursor(data);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        adapter.swapCursor(null);
    }

    @Override
    public void onListItemClick(ListView l, View v, int position, long id){
        //Get the details fragment
        /*
        DetailTimelineFragment fragment = (DetailTimelineFragment) getFragmentManager()
              .findFragmentById(R.id.fragment_details);

        if (fragment != null && fragment.isVisible()) {
           fragment.updateView(id);
            Log.d(TAG,"FragmentUpdated...");
        } else {
            startActivity(new Intent(getActivity(),DetailTimelineActivity.class).putExtra(StatusContact.Column.ID, id));
        }*/
    }

    // Handles custom binding of data to view
    class TimelineViewBinder implements ViewBinder {

        @Override
        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {
            long timestamp;

            switch (view.getId()) {
                case R.id.list_item_text_created_at:
                    // convert timestamp to relative time
                    timestamp = cursor.getLong(columnIndex);
                    CharSequence relativeTime = DateUtils.getRelativeTimeSpanString(timestamp);
                    ((TextView) view).setText(relativeTime);

                    return true;
                default:
                    return false;
            }
        }
    }
}

